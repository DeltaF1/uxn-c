( draw routines )

;color { byte 1 }
;pointer { x 2 y 2 sprite 2 } 
;rect { x1 2 y1 2 x2 2 y2 2 }
;r1 { x1 2 y1 2 x2 2 y2 2 }
;r2 { x1 2 y1 2 x2 2 y2 2 }
;r3 { x1 2 y1 2 x2 2 y2 2 }

|0100 @RESET
	
	#0020 #0030 #0060 #0060 =r1.y2 =r1.x2 =r1.y1 =r1.x1
	#0058 #0050 #0090 #0080 =r2.y2 =r2.x2 =r2.y1 =r2.x1
	#0048 #0048 #0080 #0098 =r3.y2 =r3.x2 =r3.y1 =r3.x1

BRK

@FRAME 

	~pointer.x ~Mouse.x NEQU2
	~pointer.y ~Mouse.y NEQU2

	#0000 EQU2 BRK? ( Return if unchanged )

	,pointer_icn =pointer.sprite

	#01 =color
	( matrix comparison )
	~Mouse.x ~r1.x1 GTH2 ~Mouse.x ~r1.x2 LTH2 #0101 EQU2
	~Mouse.y ~r1.y1 GTH2 ~Mouse.y ~r1.y2 LTH2 #0101 EQU2
	#0101 NEQ2 ,$draw1 ROT JMP2? #02 =color ,hand_icn =pointer.sprite 
	$draw1 ~r1.x1 ~r1.y1 ~r1.x2 ~r1.y2 ~color ,line-rect JSR2
	
	#01 =color
	( 2-step comparison )
	,$draw2 ~Mouse.x ~r2.x1 GTH2 ~Mouse.x ~r2.x2 LTH2 #0101 NEQ2 JMP2?
		,$draw2 ~Mouse.y ~r2.y1 GTH2 ~Mouse.y ~r2.y2 LTH2 #0101 NEQ2 JMP2?
			#03 =color ,hand_icn =pointer.sprite 
	$draw2 ~r2.x1 ~r2.y1 ~r2.x2 ~r2.y2 ~color ,line-rect JSR2
	
	#01 =color
	( 4-step comparison )
	,$draw3 ~Mouse.x ~r3.x1 LTH2 JMP2?
		,$draw3 ~Mouse.x ~r3.x2 GTH2 JMP2?
			,$draw3 ~Mouse.y ~r3.y1 LTH2 JMP2?
				,$draw3 ~Mouse.y ~r3.y2 GTH2 JMP2?
					#02 =color ,hand_icn =pointer.sprite
	$draw3 ~r3.x1 ~r3.y1 ~r3.x2 ~r3.y2 ~color ,line-rect JSR2

	,draw-cursor JSR2

BRK 

@draw-cursor

	( clear last cursor )
	,clear_icn =Sprite.addr 
	~pointer.x =Sprite.x 
	~pointer.y =Sprite.y 
	#10 =Sprite.color

	( record pointer positions )
	~Mouse.x =pointer.x ~Mouse.y =pointer.y

	( draw new cursor )
	~pointer.sprite =Sprite.addr 
	~pointer.x =Sprite.x 
	~pointer.y =Sprite.y 
	#11 =Sprite.color

RTN

@line-rect ( x1 y1 x2 y2 color )

	( load ) =color =rect.y2 =rect.x2 DUP2 =Screen.y =rect.y1 DUP2 =Screen.x =rect.x1
	$hor
		( incr ) ~Screen.x #0001 ADD2 =Screen.x
		( draw ) ~rect.y1 =Screen.y ~color =Screen.color
		( draw ) ~rect.y2 =Screen.y ~color =Screen.color
		,$hor ~Screen.x ~rect.x2 LTH2 JMP2?
	~rect.y1 =Screen.y
	$ver
		( draw ) ~rect.x1 =Screen.x ~color =Screen.color
		( draw ) ~rect.x2 =Screen.x ~color =Screen.color
		( incr ) ~Screen.y #0001 ADD2 =Screen.y
		,$ver ~Screen.y ~rect.y2 #0001 ADD2 LTH2 JMP2?

RTN

@clear_icn   [ 0000 0000 0000 0000 ]
@pointer_icn [ 80c0 e0f0 f8e0 1000 ]
@hand_icn    [ 4040 4070 f8f8 f870 ]

|d000 @ERROR BRK 

|FF10 ;Screen { width 2 height 2 pad 4 x 2 y 2 color 1 }
|FF20 ;Sprite { pad 8 x 2 y 2 addr 2 color 1 }
|FF50 ;Mouse  { x 2 y 2 state 1 chord 1 }

|FFF0 .RESET .FRAME .ERROR ( vectors )
|FFF8 [ 0f0f 0fff 0ff0 ] ( palette )